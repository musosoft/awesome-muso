[Commands]
size=16
1\Command="copyq:\nvar tempFolder = env('TEMP').replace(/\\\\\\\\/g, '/');\nvar tempFile = tempFolder + '/temp.svg';\npopup('Temp file path:', tempFile);\n\nvar item = str(data('text/plain'));\npopup('Selected item:', item.substring(0, 100));\n\nif (item.indexOf('<svg') !== -1) {\n    // Write to temp file\n    var writeResult = execute('bash', '-c', 'echo -e \"' + item.replace(/\"/g, '\\\\\"') + '\" > ' + tempFile);\n    if (writeResult.exitCode !== 0) {\n        popup('Failed to write SVG to temp file', writeResult.stderr);\n        return;\n    }\n    popup('SVG written to temp file', '');\n\n    // Optimize SVG using svgo\n    var svgoCommand = 'svgo ' + tempFile;\n    var svgoResult = execute(svgoCommand);\n    popup('SVGO result:', svgoResult.stdout);\n\n    if (svgoResult.exitCode === 0) {\n        // Read optimized SVG content\n        var readResult = execute('bash', '-c', 'cat ' + tempFile);\n        if (readResult.exitCode !== 0) {\n            popup('Failed to read optimized SVG', readResult.stderr);\n            return;\n        }\n        var optimizedSvg = readResult.stdout;\n        popup('Optimized SVG:', optimizedSvg.substring(0, 100));\n\n        // Update clipboard with optimized SVG\n        setData('text/plain', optimizedSvg);\n    } else {\n        popup('Failed to optimize SVG', svgoResult.stderr);\n    }\n} else {\n    popup('Item is empty or contains non-SVG item');\n}\n"
1\Icon=\xf303
1\Name=Optimize SVG
2\Command="var backupPath = 'Documents/copyq-backups'\nvar backupsToKeep = 15\n\nfunction backupDirectory() {\n    var dir = Dir().home()\n\n    dir.mkpath(backupPath)\n    if ( !dir.cd(backupPath) )\n        throw 'Error: Failed to create backup directory.'\n\n    return dir\n}\n\nfunction removeOldBackups() {\n    var dir = backupDirectory()\n    var backups = dir\n        .entryList(['*.cpq'])\n        .sort()\n        .slice(0, -backupsToKeep)\n\n    for (var i in backups) {\n        var path = dir.absoluteFilePath(backups[i])\n        var file = File(path)\n        file.remove()\n    }\n}\n\nfunction createBackup() {\n    var dir = backupDirectory()\n    var fileName = dir.absoluteFilePath(\n        dateString('yyyy-MM-dd-hh-mm-ss.cpq'))\n    exportData(fileName)\n}\n\nglobal.backup = function() {\n    createBackup()\n    removeOldBackups()\n}\n\nvar onExitPrevious = global.onExit\nglobal.onExit = function() {\n    onExitPrevious()\n    global.backup()\n}"
2\Icon=\xf0a0
2\Name=Backup On Exit
3\Command="copyq:\nvar item = str(read(0));\nif (item) {\n    var command = 'powershell.exe -Command \"& {Get-GPT3Completion -prompt \\\\\"Analyze the following text: ' + item + '\\\\\"}\"';\n    var result = execute(command);\n    popup(result.stdout);\n    copy(result.stdout);\n} else {\n    popup('Clipboard is empty or contains non-text item');\n}\n"
3\Icon=\xf022
3\Name=AI Analyze copied text
4\Command="copyq:\nvar item = str(read(0));\nconsole.log('Item: ' + item);\nif (item) {\n    var command = 'powershell.exe -Command \"& {Get-GPT3Completion -prompt \\\\\"Translate the following English text to French: ' + item + '\\\\\"}\"';\n    console.log('Executing command: ' + command);\n    var result = execute(command);\n    console.log('Result: ' + result.stdout);\n    console.error('Error: ' + result.stderr);\n    copy(result.stdout);\n} else {\n    console.error('Clipboard is empty or contains non-text item');\n}\n"
4\Icon=\xf022
4\Name=AI Translate EN FR copied text
5\Command="copyq:\nvar text = str(read(0))\nvar strippedText = text.replace(/<[^>]*>/g, '')\ncopy(strippedText)"
5\Icon=\xf022
5\Name=Strip HTML
6\Command="copyq:\nvar copiedText = str(read(0))\nvar count = copiedText.length\npopup('Character Count', 'Copied text contains ' + count + ' characters')"
6\Icon=\xf022
6\Name=Count Characters of Selected Text
7\Command="copyq:\nif (!copy())\n  abort()\n\n// http://stackoverflow.com/a/6475125/454171\nString.prototype.toTitleCase = function() {\n  var i, j, str, lowers, uppers;\n  str = this.replace(/([^\\W_]+[^\\s-]*) */g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n\n  // Certain minor words should be left lowercase unless\n  // they are the first or last words in the string\n  lowers = ['A', 'An', 'The', 'And', 'But', 'Or', 'For', 'Nor', 'As', 'At',\n  'By', 'For', 'From', 'In', 'Into', 'Near', 'Of', 'On', 'Onto', 'To', 'With'];\n  for (i = 0, j = lowers.length; i < j; i++)\n    str = str.replace(new RegExp('\\\\s' + lowers[i] + '\\\\s', 'g'),\n      function(txt) {\n        return txt.toLowerCase();\n      });\n\n  // Certain words such as initialisms or acronyms should be left uppercase\n  uppers = ['Id', 'Tv'];\n  for (i = 0, j = uppers.length; i < j; i++)\n    str = str.replace(new RegExp('\\\\b' + uppers[i] + '\\\\b', 'g'),\n      uppers[i].toUpperCase());\n\n  return str;\n}\n\nvar text = str(clipboard())\n\nvar newText = text.toTitleCase();\nif (text == newText)\n  abort();\n\ncopy(newText)\npaste()"
7\Icon=\xf034
7\Name=To Title Case
8\Command="copyq:\nif (!copy())\n  abort()\n\nvar text = str(clipboard())\n\nvar newText = text.toUpperCase()\nif (text == newText)\n  newText = text.toLowerCase()\n\nif (text == newText)\n  abort();\n\ncopy(newText)\npaste()"
8\Icon=\xf034
8\Name=Toggle Upper/Lower Case
9\Name=Pin
9\Command=copyq: plugins.itempinned.pin()
9\Icon=\xf08d
10\Name=Unpin
10\Command=copyq: plugins.itempinned.unpin()
10\Icon=\xf08d
10\InternalId=copyq_pinned_unpin
10\InMenu=true
11\Name=Tag as \x201cImportant\x201d
11\Command=copyq: plugins.itemtags.tag(decodeURIComponent('Important'))
11\Icon=\xf02b
11\InternalId=copyq_tags_tag:Important
11\InMenu=true
12\Name=Remove tag \x201cImportant\x201d
12\Command=copyq: plugins.itemtags.untag(decodeURIComponent('Important'))
12\Icon=\xf02b
12\InternalId=copyq_tags_untag:Important
4\IsGlobalShortcut=true
3\IsGlobalShortcut=true
9\InMenu=true
9\InternalId=copyq_pinned_pin
5\IsGlobalShortcut=true
5\GlobalShortcut=ctrl+alt+shift+x
12\InMenu=true
13\Name=Add a Tag
13\Command=copyq: plugins.itemtags.tag()
13\Icon=\xf02b
13\InternalId=copyq_tags_tag
6\IsGlobalShortcut=true
6\GlobalShortcut=ctrl+alt+shift+c
13\InMenu=true
14\Name=Remove a Tag
14\Command=copyq: plugins.itemtags.untag()
14\Icon=\xf02b
14\InternalId=copyq_tags_untag
7\IsGlobalShortcut=true
7\GlobalShortcut=meta+alt+t
9\Input=!OUTPUT
11\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('Important')) && fail()
14\Input=application/x-copyq-tags
14\InMenu=true
15\Name=Clear all tags
15\Command=copyq: plugins.itemtags.clearTags()
15\Icon=\xf02b
15\InternalId=copyq_tags_clear
1\InMenu=true
2\IsScript=true
3\GlobalShortcut=ctrl+alt+shift+a
8\IsGlobalShortcut=true
8\GlobalShortcut=meta+ctrl+u
9\Output=application/x-copyq-item-pinned
10\Input=application/x-copyq-item-pinned
12\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('Important')) || fail()
15\Input=application/x-copyq-tags
15\InMenu=true
16\Name=Show/hide main window
16\Command=copyq: toggle()
16\IsGlobalShortcut=true
16\Icon=\xf022
16\GlobalShortcut=alt+shift+v
16\InternalId=copyq_global_toggle
1\Input=text/plain
